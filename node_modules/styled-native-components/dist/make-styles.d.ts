import React from 'react';
import type { ReactNode, ComponentType } from 'react';
import type { StyleProp } from 'react-native';
import type { Style } from 'css-to-react-native';
import type { Theme } from './theme';
declare type NestedStyles = {
    [nestedStyle: string]: {
        main: Style;
        [mediaRule: string]: Style;
    };
};
export declare const createNestedStyleObject: (cssDeclaration: string) => NestedStyles;
export declare type OptionalKeys<T> = Exclude<{
    [K in keyof T]: T extends Record<K, T[K]> ? never : K;
}[keyof T], undefined>;
export declare type RequiredKeys<T> = Exclude<keyof T, OptionalKeys<T>>;
declare type TemplateStringExpression<P> = string | number | ((props: P) => string | number);
export declare type TemplateFunction<I, P, A = {}> = (strings: TemplateStringsArray, ...expressions: TemplateStringExpression<Omit<P & I, RequiredKeys<A> | 'children' | 'style'> & {
    theme: Theme;
} & A>[]) => ComponentType<Omit<P & I, RequiredKeys<A>>>;
export declare type AttrProps<P, I, A> = Omit<P & I, RequiredKeys<A> | 'children' | 'style'> & {
    theme: Theme;
};
export declare const makeTemplateFunction: <I extends {
    style?: StyleProp<any>;
    children?: ReactNode;
}, P = {}, A extends {
    children?: undefined;
    style?: undefined;
} = {}>(Component: React.ComponentType<I>, transformProps: (p: AttrProps<P, I, A>) => Pick<P & I, Exclude<keyof P, "children" | "style" | Exclude<keyof A, Exclude<{ [K in keyof A]: A extends Record<K, A[K]> ? never : K; }[keyof A], undefined>>> | Exclude<keyof I, "children" | "style" | Exclude<keyof A, Exclude<{ [K in keyof A]: A extends Record<K, A[K]> ? never : K; }[keyof A], undefined>>>> & {
    theme: Theme;
} & A, filterComponentProps: (props: any) => I) => TemplateFunction<I, P, A>;
export declare const useStyle: (cssDeclaration: string) => Style;
export {};
