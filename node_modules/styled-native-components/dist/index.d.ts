import { ThemeProvider, useTheme, withTheme, ThemeContext, setThemeContext } from './theme';
import { useStyle } from './make-styles';
import { useLengthAttribute, useColorAttribute } from './attribute-hooks';
import type { ComponentType } from 'react';
import type { Theme, ThemeInterface } from './theme';
import type { TemplateFunction, AttrProps } from './make-styles';
interface StyledInterface<I> {
    <P>(...args: Parameters<TemplateFunction<I, P>>): ReturnType<TemplateFunction<I, P>>;
    attrs: <P, A>(attrMaker: A | ((props: AttrProps<P, I, A>) => A)) => TemplateFunction<I, P, A>;
}
declare const styled: {
    <I>(Component: ComponentType<I>, filterComponentProps?: (p: any) => I): StyledInterface<I>;
    View: StyledInterface<import("react-native").ViewProps>;
    Text: StyledInterface<import("react-native").TextProps>;
    Image: StyledInterface<import("react-native").ImageProps>;
    ScrollView: StyledInterface<import("react-native").ScrollViewProps>;
    FlatList: StyledInterface<import("react-native").FlatListProps<unknown>>;
    SectionList: StyledInterface<import("react-native").SectionListProps<unknown>>;
    TouchableOpacity: StyledInterface<import("react-native").TouchableOpacityProps>;
    TextInput: StyledInterface<import("react-native").TextInputProps>;
    SafeAreaView: StyledInterface<import("react-native").ViewProps>;
};
export default styled;
export declare const filterProps: (props: any) => unknown;
export { ThemeProvider, useTheme, useStyle, withTheme, ThemeContext, setThemeContext, useLengthAttribute, useColorAttribute, };
export type { Theme, ThemeInterface };
export type { Style } from 'css-to-react-native';
