export declare const viewProps: Set<"accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityComponentType" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityTraits" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "style" | "onStartShouldSetResponder" | "hitSlop" | "nativeID" | "onLayout" | "onMoveShouldSetResponder" | "onMoveShouldSetResponderCapture" | "onResponderGrant" | "onResponderMove" | "onResponderReject" | "onResponderRelease" | "onResponderTerminate" | "onResponderTerminationRequest" | "onStartShouldSetResponderCapture" | "pointerEvents" | "removeClippedSubviews" | "testID" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "shouldRasterizeIOS" | "focusable" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onResponderEnd" | "onResponderStart" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture">;
export declare const textProps: Set<"accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityComponentType" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityTraits" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "style" | "nativeID" | "onLayout" | "pointerEvents" | "testID" | "selectable" | "ellipsizeMode" | "numberOfLines" | "onLongPress" | "onPress" | "pressRetentionOffset" | "allowFontScaling" | "disabled" | "selectionColor" | "textBreakStrategy" | "adjustsFontSizeToFit" | "minimumFontScale" | "suppressHighlighting" | "lineBreakMode" | "maxFontSizeMultiplier">;
export declare const imageProps: Set<"accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityComponentType" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityTraits" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "style" | "onLayout" | "pointerEvents" | "testID" | "onError" | "onLoad" | "onLoadEnd" | "onLoadStart" | "progressiveRenderingEnabled" | "resizeMode" | "resizeMethod" | "source" | "loadingIndicatorSource" | "defaultSource" | "blurRadius" | "capInsets" | "onProgress" | "onPartialLoad" | "fadeDuration">;
export declare const listProps: Set<"accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityComponentType" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityTraits" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "style" | "onStartShouldSetResponder" | "hitSlop" | "nativeID" | "onLayout" | "onMoveShouldSetResponder" | "onMoveShouldSetResponderCapture" | "onResponderGrant" | "onResponderMove" | "onResponderReject" | "onResponderRelease" | "onResponderTerminate" | "onResponderTerminationRequest" | "onStartShouldSetResponderCapture" | "pointerEvents" | "removeClippedSubviews" | "testID" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "shouldRasterizeIOS" | "focusable" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onResponderEnd" | "onResponderStart" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "columnWrapperStyle" | "contentContainerStyle" | "indicatorStyle" | "renderItem" | "data" | "sections" | "ItemSeparatorComponent" | "ListEmptyComponent" | "ListFooterComponent" | "ListHeaderComponent" | "extraData" | "getItemLayout" | "horizontal" | "initialNumToRender" | "initialScrollIndex" | "inverted" | "keyExtractor" | "numColumns" | "onEndReached" | "onEndReachedThreshold" | "onRefresh" | "onViewableItemsChanged" | "progressViewOffset" | "legacyImplementation" | "refreshing" | "viewabilityConfig" | "viewabilityConfigCallbackPairs" | "renderSectionFooter" | "renderSectionHeader" | "SectionSeparatorComponent" | "stickySectionHeadersEnabled" | "updateCellsBatchingPeriod" | "windowSize" | "disableVirtualization" | "getItem" | "getItemCount" | "debug" | "CellRendererComponent" | "onScrollToIndexFailed" | "renderScrollComponent" | "maxToRenderPerBatch" | "alwaysBounceVertical" | "keyboardDismissMode" | "keyboardShouldPersistTaps" | "onContentSizeChange" | "onMomentumScrollBegin" | "onMomentumScrollEnd" | "onScroll" | "onScrollBeginDrag" | "onScrollEndDrag" | "pagingEnabled" | "refreshControl" | "scrollEnabled" | "showsHorizontalScrollIndicator" | "showsVerticalScrollIndicator" | "stickyHeaderIndices" | "endFillColor" | "overScrollMode" | "scrollPerfTag" | "alwaysBounceHorizontal" | "automaticallyAdjustContentInsets" | "bounces" | "bouncesZoom" | "canCancelContentTouches" | "centerContent" | "contentInset" | "contentInsetAdjustmentBehavior" | "contentOffset" | "decelerationRate" | "directionalLockEnabled" | "maximumZoomScale" | "minimumZoomScale" | "pinchGestureEnabled" | "scrollEventThrottle" | "scrollIndicatorInsets" | "scrollsToTop" | "snapToAlignment" | "snapToInterval" | "snapToOffsets" | "snapToStart" | "snapToEnd" | "zoomScale" | "nestedScrollEnabled" | "listKey" | "invertStickyHeaders" | "disableIntervalMomentum" | "disableScrollViewPanResponder" | "onScrollAnimationEnd" | "scrollToOverflowEnabled" | "onScrollToTop" | "fadingEdgeLength" | "persistentScrollbar">;
export declare const inputProps: Set<"accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityComponentType" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityTraits" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "style" | "onStartShouldSetResponder" | "hitSlop" | "nativeID" | "onLayout" | "onMoveShouldSetResponder" | "onMoveShouldSetResponderCapture" | "onResponderGrant" | "onResponderMove" | "onResponderReject" | "onResponderRelease" | "onResponderTerminate" | "onResponderTerminationRequest" | "onStartShouldSetResponderCapture" | "pointerEvents" | "removeClippedSubviews" | "testID" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "shouldRasterizeIOS" | "focusable" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onResponderEnd" | "onResponderStart" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "numberOfLines" | "allowFontScaling" | "selectionColor" | "textBreakStrategy" | "maxFontSizeMultiplier" | "onContentSizeChange" | "onScroll" | "scrollEnabled" | "autoCapitalize" | "autoCorrect" | "autoFocus" | "blurOnSubmit" | "caretHidden" | "clearButtonMode" | "clearTextOnFocus" | "contextMenuHidden" | "dataDetectorTypes" | "defaultValue" | "disableFullscreenUI" | "editable" | "enablesReturnKeyAutomatically" | "inlineImageLeft" | "inlineImagePadding" | "keyboardAppearance" | "keyboardType" | "maxLength" | "multiline" | "onBlur" | "onChange" | "onChangeText" | "onEndEditing" | "onFocus" | "onKeyPress" | "onSelectionChange" | "onSubmitEditing" | "placeholder" | "placeholderTextColor" | "returnKeyLabel" | "returnKeyType" | "secureTextEntry" | "selection" | "selectionState" | "selectTextOnFocus" | "spellCheck" | "textContentType" | "underlineColorAndroid" | "value" | "onTextInput" | "inputAccessoryViewID" | "passwordRules" | "rejectResponderTermination" | "autoCompleteType" | "importantForAutofill" | "textAlignVertical" | "showSoftInputOnFocus">;
export declare const pressableProps: Set<"accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityComponentType" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityTraits" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "style" | "onStartShouldSetResponder" | "hitSlop" | "nativeID" | "onLayout" | "onMoveShouldSetResponder" | "onMoveShouldSetResponderCapture" | "onResponderGrant" | "onResponderMove" | "onResponderReject" | "onResponderRelease" | "onResponderTerminate" | "onResponderTerminationRequest" | "onStartShouldSetResponderCapture" | "pointerEvents" | "removeClippedSubviews" | "testID" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "shouldRasterizeIOS" | "focusable" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onResponderEnd" | "onResponderStart" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "onLongPress" | "onPress" | "pressRetentionOffset" | "disabled" | "onBlur" | "onFocus" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "onPressIn" | "onPressOut" | "activeOpacity" | "children" | "android_disableSound" | "android_ripple" | "testOnly_pressed" | "touchSoundDisabled">;
export declare const domProps: Set<string>;
export declare const makePropsFilter: <I>(...propsSets: Set<string>[]) => (props: any) => I;
