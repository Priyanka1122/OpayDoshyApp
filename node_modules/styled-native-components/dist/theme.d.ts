import React from 'react';
import type { ReactNode, ComponentType } from 'react';
import type { ScaledSize } from 'react-native';
import type { Style } from 'css-to-react-native';
export interface ThemeInterface {
    rem: number;
    elevation: (value: number) => Style;
}
/**
 * This interface can be augmented by users to add types to `styled-components`' default theme
 * without needing to reexport `ThemedStyledComponentsModule`.
 */
export interface Theme extends ThemeInterface {
}
export declare let ThemeContext: React.Context<Theme | null>;
export declare const setThemeContext: (ExternalThemeContext: React.Context<Theme | null>) => void;
export declare const useTheme: () => Theme;
export declare const withTheme: <P extends {
    children?: ReactNode;
}>(Component: React.ComponentType<P & {
    theme: Theme;
}>) => React.ComponentType<P>;
export declare const ThemeProvider: ({ theme, children, rootCss, rootFont, rootBackgroundColor, disableOutlines, }: {
    theme: Theme;
    children: ReactNode;
    rootCss?: string | undefined;
    rootFont?: string | undefined;
    rootBackgroundColor?: string | undefined;
    disableOutlines?: boolean | undefined;
}) => JSX.Element;
export declare const resolveColorVariablePlaceholder: (variableName: string) => string;
export declare const resolveLengthUnit: (str: string | number | undefined, theme: Theme, windowDimensions: ScaledSize) => number | string | undefined;
export declare const resolveThemeVariables: (styleObject: {
    [key: string]: any;
}, theme: Theme, windowDimensions: ScaledSize) => {
    [key: string]: any;
};
